class Solution {
public:
    bool possible(vector<int>& piles,int res,int n, int h){
        long long int hours = 0;
        for(int i = 0; i < n; i++){
            hours+=(piles[i]/res);
            if(piles[i]%res){
                hours++;
            }
        }
        if(hours>h){
                return false;
            }
        return true;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int size = piles.size(),high = INT_MIN ,low = 1;
        for(int i = 0; i < size; i++){
            high = max(high,piles[i]);
        }
        if(size == h){
            return high;
        }
        while (low<=high){
            int mid = low + (high-low)/2;
            if(possible(piles,mid,size,h)){
                high = mid - 1;
            }
            else
                low = mid + 1;
        }
        return low;
    }
};
