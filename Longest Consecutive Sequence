class Solution {
public:
    int count_chain(unordered_map <int,int>&mp,int i,vector<int>& nums,vector<int>& dp){
        if (dp[i] != 0) return dp[i];
	if (mp.find(nums[i]+1) == mp.end()) return dp[i] = 1;
	return dp[i] = count_chain(mp,mp[nums[i]+1], nums,dp)+1;
    }
    int longestConsecutive(vector<int>& nums) {
        if (!nums.size()) return 0;
        unordered_map <int,int>mp;
        vector<int> dp(nums.size(),0);
        int size = nums.size(),max = 0;
        for(int i=0;i<size;i++){
            mp[nums[i]] = i;
        }
        for(int i=0;i<size;i++){
            count_chain(mp,i,nums,dp);
        }
        return *max_element(dp.begin(), dp.end());
    }
};
